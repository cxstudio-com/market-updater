
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<context:property-placeholder location="classpath:updater.properties" order="1" ignore-unresolvable="true" system-properties-mode="NEVER" />
	
	<context:component-scan base-package="com.cxstudio.market" />

	<bean id="symbolDao" class="com.cxstudio.market.updater.persistent.SymbolDao"/>
	<bean id="tradeDao" class="com.cxstudio.market.updater.persistent.TradeDao"/>	
	<bean id="patternDao" class="com.cxstudio.market.updater.persistent.PatternDao"/>
	
	<bean id="patternConfig30Step" class="com.cxstudio.market.pattern.model.PatternConfig">
		<constructor-arg name="interval" value="60"/>
		<constructor-arg name="length" value="30" />
		<constructor-arg name="stepsToPrediction" value="5" />
		<constructor-arg name="predictionRange" value="2" />
	</bean>
	
	<bean id="marketUpdateProperties" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="PatternRunner.threadPoolSize" value="${PatternRunner.threadPoolSize}" />				
			</map>
		</constructor-arg>
	</bean>
	
	<bean id="runnerHelper" class="com.cxstudio.market.pattern.PatternRunnerHelper"/>
	
	<bean id="qualifier" class="com.cxstudio.market.pattern.model.PatternQualifier">
		<property name="simularityThreashold" value="${PatternQualifier.simularityThreashold}"/>
		<property name="minHitCount" value="${PatternQualifier.minHitCount}" />
		<property name="confidenceThreashold" value="${PatternQualifier.confidenceThreashold}"/>
		<property name="trendThreashold" value="${PatternQualifier.trendThreashold}"/>
		<property name="performanceThreashold" value="${PatternQualifier.performanceThreashold}"/>
	</bean>
	
	<bean id="patternRunner" class="com.cxstudio.market.pattern.PatternRunner" scope="prototype">
		<constructor-arg name="patternConfig" ref="patternConfig30Step" />
		<constructor-arg name="qualifier" ref="qualifier"/>
		<constructor-arg name="imageOutputFolder" value="${PatternRunner.imageOutputFolder}" />
	</bean>
	
	
	<bean id="dataProvider" class="com.cxstudio.market.updater.dataprovider.GoogleFinanceDataRetreiver"></bean>
	
	<bean id="mockDataProvider" class="com.cxstudio.market.updater.dataprovider.GoogleFinanceDataRetreiver">
		<constructor-arg name="googleUrl" value="http://localhost:8080/updater/quote/getprices" />
	</bean>
	
	<bean id="stockUpdater" class="com.cxstudio.market.updater.UpdateStockPrices">
		<constructor-arg name="symbolDao" ref="symbolDao"/>
		<constructor-arg name="tradeDao" ref="tradeDao"/>
		<constructor-arg name="dataProvider" ref="dataProvider"/>
	</bean>
	
	<bean id="csvDataImporter" class="com.cxstudio.market.util.CsvDataImporter">
		<constructor-arg name="symbolDao" ref="symbolDao"/>
		<constructor-arg name="tradeDao" ref="tradeDao"/>
	</bean>
	
</beans>